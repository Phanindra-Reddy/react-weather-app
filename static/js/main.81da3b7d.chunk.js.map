{"version":3,"sources":["Components/Nav.js","Components/ResultForeCast.js","Components/Result.js","Components/NotFound.js","Components/MainPage.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","Navbar","collapseOnSelect","expand","bg","variant","fixed","className","Brand","href","size","ResultForeCast","forecasts","id","map","item","icon","weather","iconUrl","dt_txt","slice","src","alt","main","temp","dt","date","Date","toDateString","Result","data","forecast","weatherIcon","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","city","country","description","highestTemp","wind","sunrise","lowestTemp","humidity","sunset","NotFound","faFrown","MainPage","props","setCityName","e","setState","cityName","target","value","loadData","preventDefault","Promise","all","fetch","state","then","res1","res2","ok","json","Error","statusText","data1","data2","console","log","weatherData","name","sys","temp_max","temp_min","toLocaleTimeString","hour","minute","hour12","clouds","speed","list","error","catch","weatherInfo","this","onSubmit","type","placeholder","aria-label","onChange","Component","App","Fragment","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81da3b7d.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport { WiDaySnowThunderstorm } from \"react-icons/wi\";\r\n\r\n\r\nfunction Nav(){\r\n    \r\n    return(\r\n        <div>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" fixed=\"top\" className=\"text-white\">\r\n                <Navbar.Brand href=\"#home\">\r\n                    <WiDaySnowThunderstorm size=\"2em\"/>\r\n                    React Weather App\r\n                </Navbar.Brand>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\nexport default Nav;","import React from 'react';\r\nimport '../App.css';\r\n\r\nconst ResultForeCast = ({forecasts}) => {\r\n\r\n    return(\r\n        <div>\r\n        <h4>Forecast</h4>\r\n        <div id=\"forecast-div\">\r\n            {\r\n                forecasts.map(item =>{\r\n                    let icon = item.weather[0].icon;\r\n                    const iconUrl = `https://openweathermap.org/img/w/${icon}.png` ;\r\n                    return  <div id=\"forecast-box\" key={item.dt}>\r\n                                <p>{item.dt_txt.slice(5,10)}</p>\r\n                                <p>{item.dt_txt.slice(11,16)}</p>\r\n                                <img src={iconUrl} alt={item.weather[0].main}/>\r\n                                <p>{item.main.temp}&#176;</p>\r\n                            </div>\r\n                })\r\n            }\r\n            \r\n        </div>\r\n        </div>\r\n    );\r\n}\r\nexport default ResultForeCast;\r\n\r\n// const iconUrl = `https://openweathermap.org/img/w/${icon}.png` ;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {faCloud, faBolt, faCloudRain, faCloudShowersHeavy, faSnowflake, faSun, faSmog } from '@fortawesome/free-solid-svg-icons';\r\nimport ResultForeCast from './ResultForeCast';\r\n\r\nconst date = new Date().toDateString();\r\n\r\nconst Result = ({weather}) => {\r\n\r\n    const data = weather;\r\n\r\n    const forecasts = data.forecast;\r\n    \r\n    const main = data.main;\r\n    let weatherIcon = null;\r\n\r\n    if (main === 'Thunderstorm') {\r\n        weatherIcon = <FontAwesomeIcon icon={faBolt} />;\r\n        } else if (main === 'Drizzle') {\r\n            weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\r\n        } else if (main === 'Rain') {\r\n            weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\r\n        } else if (main === 'Snow') {\r\n            weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\r\n        } else if (main === 'Clear') {\r\n            weatherIcon = <FontAwesomeIcon icon={faSun} />\r\n        } else if (main === 'Clouds') {\r\n            weatherIcon = <FontAwesomeIcon icon={faCloud} />;\r\n        } else {\r\n            weatherIcon = <FontAwesomeIcon icon={faSmog} />;\r\n    }\r\n    \r\n    return ( \r\n        <div>\r\n            <div id=\"city-div\">\r\n                <h1>{data.city}, {data.country}</h1>\r\n                <p>{date}</p>\r\n            </div>\r\n            \r\n            <div id=\"weather-container\">\r\n\r\n                <div className=\"weather-box\" id=\"today-weather\">\r\n                \r\n                    <span>{weatherIcon}</span> \r\n                    {/* <img src={weatherIcon} alt=\"type_of_weather\" width=\"200\" height=\"200\"/> */}\r\n                    <div id=\"today-temp\">\r\n                        <h1>{data.temp}&#176;</h1>\r\n                        <p>{data.description}</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"weather-box daily-data\">\r\n                    <div>\r\n                        <span>Max</span>\r\n                        <h4>{data.highestTemp}&#176;</h4>\r\n                    </div>\r\n                    <div>\r\n                        <span>Wind</span>\r\n                        <h4>{data.wind}mph</h4>\r\n                    </div>\r\n                    <div>\r\n                        <span>Sunrise</span>\r\n                        <h4>{data.sunrise}am</h4>\r\n                    </div>\r\n                    <div>\r\n                        <span>Min</span>\r\n                        <h4>{data.lowestTemp}&#176;</h4>\r\n                    </div>\r\n                    <div>\r\n                        <span>Rain</span>\r\n                        <h4>{data.humidity}%</h4>\r\n                    </div>\r\n                    <div>\r\n                        <span>Sunset</span>\r\n                        <h4>{data.sunset}pm</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {<ResultForeCast forecasts={forecasts}/>}\r\n        </div>\r\n    );\r\n    \r\n}\r\n \r\nexport default Result;","import React from 'react';\r\nimport '../App.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFrown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n\r\n        <div id=\"notFoundDiv\">\r\n            <span id=\"not-found-icon\"> <FontAwesomeIcon icon={faFrown} /> </span>\r\n            <h3 id=\"not-found-text\">Sorry, the specified city was not found..</h3>\r\n        </div>\r\n\r\n    );\r\n  };\r\n  \r\n  export default NotFound;","import React,{Component} from 'react';\r\nimport '../App.css';\r\nimport Result from './Result';\r\nimport NotFound from './NotFound';\r\n\r\n\r\nclass MainPage extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            cityName:'',\r\n            weatherData: null,\r\n            error:false,\r\n        }\r\n    };\r\n\r\n    setCityName = (e) =>{\r\n        this.setState({\r\n            cityName:e.target.value\r\n        })\r\n    }\r\n\r\n    loadData = (e) => {\r\n        e.preventDefault();\r\n        Promise.all([fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.cityName}&units=metric&APPID=d055ded8da2a06b0617f888ee4e903a6`),\r\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${this.state.cityName}&units=metric&APPID=d055ded8da2a06b0617f888ee4e903a6`)\r\n        ])\r\n        .then(([res1, res2]) => {\r\n            if (res1.ok && res2.ok) {\r\n              return Promise.all([res1.json(), res2.json()]);\r\n            }\r\n            throw Error(res1.statusText, res2.statusText);\r\n        })\r\n        .then(([data1, data2])=>{\r\n            console.log(data1);\r\n            const weatherData = {\r\n                city: data1.name,\r\n                country: data1.sys.country,\r\n                date : new Date().toDateString(),\r\n                description: data1.weather[0].description,\r\n                icon : data1.weather[0].icon,\r\n                main: data1.weather[0].main,\r\n                temp: data1.main.temp,\r\n                highestTemp: data1.main.temp_max,\r\n                lowestTemp: data1.main.temp_min,\r\n                sunrise : new Date(data1.sys.sunrise * 1000).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit',hour12:true}).slice(0, 5),\r\n                sunset : new Date(data1.sys.sunset * 1000).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit', hour12:true}).slice(0, 5),\r\n                clouds: data1.clouds.all,\r\n                humidity: data1.main.humidity,\r\n                wind: data1.wind.speed,\r\n                forecast: data2.list,\r\n            };\r\n\r\n            this.setState({\r\n                weatherData,\r\n                error: false\r\n            })\r\n        })\r\n        .catch((error)=> {\r\n            console.log(error);\r\n\r\n            this.setState({\r\n                error: true,\r\n                weatherInfo: null,\r\n            });\r\n        });\r\n    }    \r\n    \r\n    \r\n    render() {\r\n        const {weatherData,error} = this.state\r\n        return ( \r\n            <div className=\"input-container\">\r\n                <form onSubmit={this.loadData} className=\"form-inline d-flex flex-row justify-content-center align-items-center\">\r\n                    <input \r\n                        value={this.state.cityName} \r\n                        id=\"citySerach\"\r\n                        className=\"cityInput\" \r\n                        type=\"text\" \r\n                        placeholder=\"Enter City Name\" \r\n                        aria-label=\"Search\"\r\n                        onChange={this.setCityName}\r\n                        onSubmit={this.loadData}\r\n                    />\r\n                </form>\r\n                \r\n                {weatherData && <Result weather={weatherData} />}\r\n                {error && <NotFound error={error} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default MainPage;\r\n\r\n// `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&APPID=d055ded8da2a06b0617f888ee4e903a6`\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Components/Nav';\nimport MainPage from './Components/MainPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <React.Fragment>\n        <Nav/>\n        <MainPage/>\n      </React.Fragment>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}