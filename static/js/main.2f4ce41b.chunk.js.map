{"version":3,"sources":["Components/Home.js","Components/Result.js","Components/MainPage.js","App.js","reportWebVitals.js","index.js"],"names":["Home","Navbar","collapseOnSelect","expand","bg","variant","fixed","className","Brand","href","size","date","Date","toDateString","Result","props","data","main","weather","weatherIcon","icon","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","temp","Math","round","description","max","temp_max","min","temp_min","sunrise","sys","toLocaleTimeString","hour","minute","hour12","slice","sunset","wind","speed","rain","humidity","id","name","country","MainPage","setCityName","e","setState","cityName","target","value","loadData","preventDefault","fetch","state","then","res","json","weatherData","catch","err","console","log","navigator","geolocation","getCurrentPosition","position","lat_lon","latitude","coords","longitude","onSubmit","this","type","placeholder","aria-label","onChange","map","dt","Component","App","Fragment","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAmBeA,MAbf,WAEI,OACI,8BACI,cAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,OAAOC,MAAM,MAAMC,UAAU,aAApF,SACI,eAACN,EAAA,EAAOO,MAAR,CAAcC,KAAK,QAAnB,UACI,cAAC,IAAD,CAAuBC,KAAK,QADhC,4B,8CCGVC,GAAO,IAAIC,MAAOC,eAoFTC,EAlFA,SAACC,GACZ,IAAMC,EAAOD,EAAMC,KAGbC,EAAOD,EAAKE,QAAQ,GAAGD,KACzBE,EAAc,KAGdA,EADS,iBAATF,EACc,cAAC,IAAD,CAAiBG,KAAMC,MACjB,YAATJ,EACO,cAAC,IAAD,CAAiBG,KAAME,MACrB,SAATL,EACO,cAAC,IAAD,CAAiBG,KAAMG,MACrB,SAATN,EACO,cAAC,IAAD,CAAiBG,KAAMI,MACrB,UAATP,EACO,cAAC,IAAD,CAAiBG,KAAMK,MACrB,WAATR,EACO,cAAC,IAAD,CAAiBG,KAAMM,MAEvB,cAAC,IAAD,CAAiBN,KAAMO,MAG7C,IAAMC,EAAOC,KAAKC,MAAMd,EAAKC,KAAKW,MAC5BG,EAAcf,EAAKE,QAAQ,GAAGa,YAC9BC,EAAMH,KAAKC,MAAMd,EAAKC,KAAKgB,UAC3BC,EAAML,KAAKC,MAAMd,EAAKC,KAAKkB,UAC3BC,EAAU,IAAIxB,KAAwB,IAAnBI,EAAKqB,IAAID,SAAgBE,mBAAmB,GAAI,CAACC,KAAM,UAAWC,OAAQ,UAAUC,QAAO,IAAOC,MAAM,EAAG,GAC9HC,EAAS,IAAI/B,KAAuB,IAAlBI,EAAKqB,IAAIM,QAAeL,mBAAmB,GAAI,CAACC,KAAM,UAAWC,OAAQ,UAAWC,QAAO,IAAOC,MAAM,EAAG,GAC7HE,EAAO5B,EAAK4B,KAAKC,MACjBC,EAAO9B,EAAKC,KAAK8B,SACvB,OACI,gCACI,sBAAKC,GAAG,WAAR,UACI,+BAAKhC,EAAKiC,KAAV,KAAkBjC,EAAKqB,IAAIa,WAC3B,4BAAIvC,OAGR,sBAAKqC,GAAG,oBAAR,UAEI,sBAAKzC,UAAU,cAAcyC,GAAG,gBAAhC,UAEI,+BAAO7B,IAEP,sBAAK6B,GAAG,aAAR,UACI,+BAAKpB,EAAL,UACA,4BAAIG,UAIZ,sBAAKxB,UAAU,yBAAf,UACI,gCACI,uCACA,+BAAKyB,EAAL,aAEJ,gCACI,wCACA,+BAAKY,EAAL,YAEJ,gCACI,2CACA,+BAAKR,EAAL,WAEJ,gCACI,uCACA,+BAAKF,EAAL,aAEJ,gCACI,wCACA,+BAAKY,EAAL,UAEJ,gCACI,0CACA,+BAAKH,EAAL,qBCxBTQ,E,kDA5DX,WAAYpC,GAAO,IAAD,8BACd,cAAMA,IAOVqC,YAAc,SAACC,GACX,EAAKC,SAAS,CACVC,SAASF,EAAEG,OAAOC,SAVR,EAclBC,SAAW,SAACL,GACRA,EAAEM,iBACFC,MAAM,qDAAD,OAAsD,EAAKC,MAAMN,SAAjE,yDACJO,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAC9C,GACH,EAAKsC,SAAS,CACVW,YAAY,CAACjD,QAGpBkD,OAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAIF,OArBxB,EAAKN,MAAQ,CACTN,SAAS,GACTU,YAAa,IAJH,E,gEA2BdK,UAAUC,YAAYC,oBAAmB,SAASC,GAC9C,IAAIC,EAAQ,CACVC,SAASF,EAASG,OAAOD,SACzBE,UAAUJ,EAASG,OAAOC,WAE5BT,QAAQC,IAAIK,Q,+BAMhB,OACI,sBAAKnE,UAAU,kBAAf,UACI,sBAAMuE,SAAUC,KAAKrB,SAAUnD,UAAU,wEAAzC,SACI,uBACIkD,MAAOsB,KAAKlB,MAAMN,SAClBP,GAAG,aACHzC,UAAU,YACVyE,KAAK,OACLC,YAAY,kBACZC,aAAW,SACXC,SAAUJ,KAAK3B,YACf0B,SAAUC,KAAKrB,aAItBqB,KAAKlB,MAAMI,YAAYmB,KAAI,SAAApE,GAAI,OAAG,cAAC,EAAD,CAAsBA,KAAMA,GAAfA,EAAKqE,c,GAtD9CC,aCYRC,MAXf,WACE,OACE,qBAAKhF,UAAU,MAAf,SACE,eAAC,IAAMiF,SAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,UCEOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.2f4ce41b.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport { WiDaySnowThunderstorm } from \"react-icons/wi\";\r\n\r\n\r\nfunction Home(){\r\n    \r\n    return(\r\n        <div>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" fixed=\"top\" className=\"text-white\">\r\n                <Navbar.Brand href=\"#home\">\r\n                    <WiDaySnowThunderstorm size=\"2em\"/>\r\n                    React Weather App\r\n                </Navbar.Brand>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\nexport default Home;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {faCloud, faBolt, faCloudRain, faCloudShowersHeavy, faSnowflake, faSun, faSmog } from '@fortawesome/free-solid-svg-icons';\r\n\r\n// const months = [\r\n//     'January','February','March','April','May','June','July','August','September','October','Nocvember','December',\r\n// ];\r\n// const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n// const currentDate = new Date();\r\n// const date = `${days[currentDate.getDay()]} ${currentDate.getDate()} ${\r\n//     months[currentDate.getMonth()]\r\n// }`;\r\n\r\n\r\nconst date = new Date().toDateString();\r\n\r\nconst Result = (props) => {\r\n    const data = props.data\r\n\r\n    //var icon = data.weather[0].icon;\r\n    const main = data.weather[0].main;\r\n    let weatherIcon = null;\r\n\r\n    if (main === 'Thunderstorm') {\r\n        weatherIcon = <FontAwesomeIcon icon={faBolt} />;\r\n        } else if (main === 'Drizzle') {\r\n            weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\r\n        } else if (main === 'Rain') {\r\n            weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\r\n        } else if (main === 'Snow') {\r\n            weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\r\n        } else if (main === 'Clear') {\r\n            weatherIcon = <FontAwesomeIcon icon={faSun} />\r\n        } else if (main === 'Clouds') {\r\n            weatherIcon = <FontAwesomeIcon icon={faCloud} />;\r\n        } else {\r\n            weatherIcon = <FontAwesomeIcon icon={faSmog} />;\r\n    }\r\n\r\n    const temp = Math.round(data.main.temp);\r\n    const description = data.weather[0].description;\r\n    const max = Math.round(data.main.temp_max);\r\n    const min = Math.round(data.main.temp_min);\r\n    const sunrise = new Date(data.sys.sunrise * 1000).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit',hour12:true}).slice(0, 5);\r\n    const sunset = new Date(data.sys.sunset * 1000).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit', hour12:true}).slice(0, 5);\r\n    const wind = data.wind.speed;\r\n    const rain = data.main.humidity; \r\n    return ( \r\n        <div>\r\n            <div id=\"city-div\">\r\n                <h1>{data.name}, {data.sys.country}</h1>\r\n                <p>{date}</p>\r\n            </div>\r\n            \r\n            <div id=\"weather-container\">\r\n\r\n                <div className=\"weather-box\" id=\"today-weather\">\r\n                \r\n                    <span>{weatherIcon}</span>\r\n                    {/* <img src={weatherIcon} alt=\"type_of_weather\" width=\"200\" height=\"120\"/> */}\r\n                    <div id=\"today-temp\">\r\n                        <h1>{temp}&#176;</h1>\r\n                        <p>{description}</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"weather-box daily-data\">\r\n                    <div>\r\n                        <span>Max</span>\r\n                        <h4>{max}&#176;</h4>\r\n                    </div>\r\n                    <div>\r\n                        <span>Wind</span>\r\n                        <h4>{wind}mph</h4>\r\n                    </div>\r\n                    <div>\r\n                        <span>Sunrise</span>\r\n                        <h4>{sunrise}am</h4>\r\n                    </div>\r\n                    <div>\r\n                        <span>Min</span>\r\n                        <h4>{min}&#176;</h4>\r\n                    </div>\r\n                    <div>\r\n                        <span>Rain</span>\r\n                        <h4>{rain}%</h4>\r\n                    </div>\r\n                    <div>\r\n                        <span>Sunset</span>\r\n                        <h4>{sunset}pm</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n}\r\n \r\nexport default Result;","import React,{Component} from 'react';\r\nimport '../App.css';\r\nimport Result from './Result';\r\n\r\nclass MainPage extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            cityName:'',\r\n            weatherData: []\r\n        }\r\n    };\r\n\r\n    setCityName = (e) =>{\r\n        this.setState({\r\n            cityName:e.target.value\r\n        })\r\n    }\r\n\r\n    loadData = (e) => {\r\n        e.preventDefault();\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.cityName}&units=metric&APPID=d055ded8da2a06b0617f888ee4e903a6`)\r\n        .then(res=>res.json())\r\n        .then((data)=>{\r\n            this.setState({\r\n                weatherData:[data]\r\n            })\r\n        })\r\n        .catch(err=>console.log(err));\r\n    }    \r\n    \r\n    componentDidMount() {\r\n        navigator.geolocation.getCurrentPosition(function(position) {\r\n            var lat_lon={\r\n              latitude:position.coords.latitude,\r\n              longitude:position.coords.longitude\r\n            }\r\n            console.log(lat_lon);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        \r\n        return ( \r\n            <div className=\"input-container\">\r\n                <form onSubmit={this.loadData} className=\"form-inline d-flex flex-row justify-content-center align-items-center\">\r\n                    <input \r\n                        value={this.state.cityName} \r\n                        id=\"citySerach\"\r\n                        className=\"cityInput\" \r\n                        type=\"text\" \r\n                        placeholder=\"Enter City Name\" \r\n                        aria-label=\"Search\"\r\n                        onChange={this.setCityName}\r\n                        onSubmit={this.loadData}\r\n                    />\r\n                </form>\r\n\r\n                {this.state.weatherData.map(data =><Result key={data.dt} data={data}/>)}\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default MainPage;\r\n\r\n// `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&APPID=d055ded8da2a06b0617f888ee4e903a6`","import React from 'react';\nimport './App.css';\nimport Home from './Components/Home';\nimport MainPage from './Components/MainPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <React.Fragment>\n        <Home/>\n        <MainPage/>\n      </React.Fragment>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}